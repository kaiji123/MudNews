@page "/news"
@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using MudBlazor
@rendermode InteractiveServer
@* @attribute [StreamRendering] *@

<PageTitle>Anime</PageTitle>

<h1>Animes</h1>



@if (animeData == null)
{
    <p><em>Loading...</em></p>
}
else
{
   <table class="table">

        <tbody>
            @foreach (var anime in animeData.RootElement.GetProperty("data").EnumerateArray())
            {
                <tr>
				
                    <td><MudLink >@anime.GetProperty("title").GetString()</MudLink></td>
                    <td><MudImage Src="@anime.GetProperty("images").GetProperty("jpg").GetProperty("image_url").GetString()" Alt="Anime Image" Height="150" Elevation="10" Class="rounded-lg"/></td>
                    <!-- Access and display other properties dynamically -->


					<td><MudRating SelectedValue="0" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private AnimeList[]? animes;
    private string jsonResponse;
    private System.Text.Json.JsonDocument animeData;
    static readonly HttpClient httpClient = new HttpClient();
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        @* jsonResponse = await client.GetFromJsonAsync<AnimeList[]>("https://api.jikan.moe/v4/seasons/now"); *@

        try
        {
            // Fetch JSON data as string
            jsonResponse = await httpClient.GetStringAsync("https://api.jikan.moe/v4/seasons/now");
            animeData = System.Text.Json.JsonDocument.Parse(jsonResponse);
            Console.WriteLine(animeData);
        }
        catch (Exception ex)
        {
            jsonResponse = $"Error: {ex.Message}";
        }
        
        
    }

    private class AnimeList
    {
    
        public int mal_id { get; set; }
 
    }
}


